// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api.proto

package api_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	CreatePVZ(ctx context.Context, in *CreatePVZReq, opts ...grpc.CallOption) (*CreatePVZResp, error)
	ListPVZs(ctx context.Context, in *ListPVZsReq, opts ...grpc.CallOption) (*ListPVZsResp, error)
	GetPVZByID(ctx context.Context, in *GetPVZByIDReq, opts ...grpc.CallOption) (*GetPVZByIDResp, error)
	UpdatePVZ(ctx context.Context, in *UpdatePVZReq, opts ...grpc.CallOption) (*UpdatePVZResp, error)
	DeletePVZ(ctx context.Context, in *DeletePVZReq, opts ...grpc.CallOption) (*DeletePVZResp, error)
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
	ListOrders(ctx context.Context, in *ListOrdersReq, opts ...grpc.CallOption) (*ListOrdersResp, error)
	GetOrderByID(ctx context.Context, in *GetOrderByIDReq, opts ...grpc.CallOption) (*GetOrderByIDResp, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderResp, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) CreatePVZ(ctx context.Context, in *CreatePVZReq, opts ...grpc.CallOption) (*CreatePVZResp, error) {
	out := new(CreatePVZResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/CreatePVZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListPVZs(ctx context.Context, in *ListPVZsReq, opts ...grpc.CallOption) (*ListPVZsResp, error) {
	out := new(ListPVZsResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/ListPVZs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetPVZByID(ctx context.Context, in *GetPVZByIDReq, opts ...grpc.CallOption) (*GetPVZByIDResp, error) {
	out := new(GetPVZByIDResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/GetPVZByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdatePVZ(ctx context.Context, in *UpdatePVZReq, opts ...grpc.CallOption) (*UpdatePVZResp, error) {
	out := new(UpdatePVZResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/UpdatePVZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeletePVZ(ctx context.Context, in *DeletePVZReq, opts ...grpc.CallOption) (*DeletePVZResp, error) {
	out := new(DeletePVZResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/DeletePVZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListOrders(ctx context.Context, in *ListOrdersReq, opts ...grpc.CallOption) (*ListOrdersResp, error) {
	out := new(ListOrdersResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrderByID(ctx context.Context, in *GetOrderByIDReq, opts ...grpc.CallOption) (*GetOrderByIDResp, error) {
	out := new(GetOrderByIDResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*DeleteOrderResp, error) {
	out := new(DeleteOrderResp)
	err := c.cc.Invoke(ctx, "/grpc_server.Api/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	CreatePVZ(context.Context, *CreatePVZReq) (*CreatePVZResp, error)
	ListPVZs(context.Context, *ListPVZsReq) (*ListPVZsResp, error)
	GetPVZByID(context.Context, *GetPVZByIDReq) (*GetPVZByIDResp, error)
	UpdatePVZ(context.Context, *UpdatePVZReq) (*UpdatePVZResp, error)
	DeletePVZ(context.Context, *DeletePVZReq) (*DeletePVZResp, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error)
	ListOrders(context.Context, *ListOrdersReq) (*ListOrdersResp, error)
	GetOrderByID(context.Context, *GetOrderByIDReq) (*GetOrderByIDResp, error)
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderResp, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) CreatePVZ(context.Context, *CreatePVZReq) (*CreatePVZResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePVZ not implemented")
}
func (UnimplementedApiServer) ListPVZs(context.Context, *ListPVZsReq) (*ListPVZsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPVZs not implemented")
}
func (UnimplementedApiServer) GetPVZByID(context.Context, *GetPVZByIDReq) (*GetPVZByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPVZByID not implemented")
}
func (UnimplementedApiServer) UpdatePVZ(context.Context, *UpdatePVZReq) (*UpdatePVZResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePVZ not implemented")
}
func (UnimplementedApiServer) DeletePVZ(context.Context, *DeletePVZReq) (*DeletePVZResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePVZ not implemented")
}
func (UnimplementedApiServer) CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedApiServer) ListOrders(context.Context, *ListOrdersReq) (*ListOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedApiServer) GetOrderByID(context.Context, *GetOrderByIDReq) (*GetOrderByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedApiServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedApiServer) DeleteOrder(context.Context, *DeleteOrderReq) (*DeleteOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_CreatePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePVZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreatePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/CreatePVZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreatePVZ(ctx, req.(*CreatePVZReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListPVZs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPVZsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListPVZs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/ListPVZs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListPVZs(ctx, req.(*ListPVZsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetPVZByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPVZByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetPVZByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/GetPVZByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetPVZByID(ctx, req.(*GetPVZByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdatePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePVZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdatePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/UpdatePVZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdatePVZ(ctx, req.(*UpdatePVZReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeletePVZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePVZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeletePVZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/DeletePVZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeletePVZ(ctx, req.(*DeletePVZReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListOrders(ctx, req.(*ListOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrderByID(ctx, req.(*GetOrderByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.Api/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteOrder(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePVZ",
			Handler:    _Api_CreatePVZ_Handler,
		},
		{
			MethodName: "ListPVZs",
			Handler:    _Api_ListPVZs_Handler,
		},
		{
			MethodName: "GetPVZByID",
			Handler:    _Api_GetPVZByID_Handler,
		},
		{
			MethodName: "UpdatePVZ",
			Handler:    _Api_UpdatePVZ_Handler,
		},
		{
			MethodName: "DeletePVZ",
			Handler:    _Api_DeletePVZ_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Api_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Api_ListOrders_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _Api_GetOrderByID_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Api_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Api_DeleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

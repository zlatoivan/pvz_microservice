// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/zlatoivan4/homework/internal/kafka"
)

// ProducerMock implements middleware.Producer
type ProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendMessage          func(message kafka.CrudMessage) (err error)
	inspectFuncSendMessage   func(message kafka.CrudMessage)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mProducerMockSendMessage
}

// NewProducerMock returns a mock for middleware.Producer
func NewProducerMock(t minimock.Tester) *ProducerMock {
	m := &ProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMessageMock = mProducerMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ProducerMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProducerMockSendMessage struct {
	mock               *ProducerMock
	defaultExpectation *ProducerMockSendMessageExpectation
	expectations       []*ProducerMockSendMessageExpectation

	callArgs []*ProducerMockSendMessageParams
	mutex    sync.RWMutex
}

// ProducerMockSendMessageExpectation specifies expectation struct of the Producer.SendMessage
type ProducerMockSendMessageExpectation struct {
	mock    *ProducerMock
	params  *ProducerMockSendMessageParams
	results *ProducerMockSendMessageResults
	Counter uint64
}

// ProducerMockSendMessageParams contains parameters of the Producer.SendMessage
type ProducerMockSendMessageParams struct {
	message kafka.CrudMessage
}

// ProducerMockSendMessageResults contains results of the Producer.SendMessage
type ProducerMockSendMessageResults struct {
	err error
}

// Expect sets up expected params for Producer.SendMessage
func (mmSendMessage *mProducerMockSendMessage) Expect(message kafka.CrudMessage) *mProducerMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProducerMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ProducerMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &ProducerMockSendMessageParams{message}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the Producer.SendMessage
func (mmSendMessage *mProducerMockSendMessage) Inspect(f func(message kafka.CrudMessage)) *mProducerMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ProducerMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by Producer.SendMessage
func (mmSendMessage *mProducerMockSendMessage) Return(err error) *ProducerMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProducerMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ProducerMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ProducerMockSendMessageResults{err}
	return mmSendMessage.mock
}

// Set uses given function f to mock the Producer.SendMessage method
func (mmSendMessage *mProducerMockSendMessage) Set(f func(message kafka.CrudMessage) (err error)) *ProducerMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the Producer.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the Producer.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the Producer.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mProducerMockSendMessage) When(message kafka.CrudMessage) *ProducerMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProducerMock.SendMessage mock is already set by Set")
	}

	expectation := &ProducerMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &ProducerMockSendMessageParams{message},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up Producer.SendMessage return parameters for the expectation previously defined by the When method
func (e *ProducerMockSendMessageExpectation) Then(err error) *ProducerMock {
	e.results = &ProducerMockSendMessageResults{err}
	return e.mock
}

// SendMessage implements middleware.Producer
func (mmSendMessage *ProducerMock) SendMessage(message kafka.CrudMessage) (err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(message)
	}

	mm_params := ProducerMockSendMessageParams{message}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := ProducerMockSendMessageParams{message}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ProducerMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ProducerMock.SendMessage")
		}
		return (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(message)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ProducerMock.SendMessage. %v", message)
	return
}

// SendMessageAfterCounter returns a count of finished ProducerMock.SendMessage invocations
func (mmSendMessage *ProducerMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ProducerMock.SendMessage invocations
func (mmSendMessage *ProducerMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ProducerMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mProducerMockSendMessage) Calls() []*ProducerMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ProducerMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ProducerMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ProducerMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProducerMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to ProducerMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to ProducerMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendMessageInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendMessageDone()
}

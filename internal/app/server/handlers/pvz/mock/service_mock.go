// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
	"gitlab.ozon.dev/zlatoivan4/homework/internal/model"
)

// ServiceMock implements pvz.service
type ServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreatePVZ          func(ctx context.Context, pvz model.PVZ) (u1 uuid.UUID, err error)
	inspectFuncCreatePVZ   func(ctx context.Context, pvz model.PVZ)
	afterCreatePVZCounter  uint64
	beforeCreatePVZCounter uint64
	CreatePVZMock          mServiceMockCreatePVZ

	funcDeletePVZ          func(ctx context.Context, id uuid.UUID) (err error)
	inspectFuncDeletePVZ   func(ctx context.Context, id uuid.UUID)
	afterDeletePVZCounter  uint64
	beforeDeletePVZCounter uint64
	DeletePVZMock          mServiceMockDeletePVZ

	funcGetPVZByID          func(ctx context.Context, id uuid.UUID) (p1 model.PVZ, err error)
	inspectFuncGetPVZByID   func(ctx context.Context, id uuid.UUID)
	afterGetPVZByIDCounter  uint64
	beforeGetPVZByIDCounter uint64
	GetPVZByIDMock          mServiceMockGetPVZByID

	funcListPVZs          func(ctx context.Context) (pa1 []model.PVZ, err error)
	inspectFuncListPVZs   func(ctx context.Context)
	afterListPVZsCounter  uint64
	beforeListPVZsCounter uint64
	ListPVZsMock          mServiceMockListPVZs

	funcUpdatePVZ          func(ctx context.Context, updPVZ model.PVZ) (err error)
	inspectFuncUpdatePVZ   func(ctx context.Context, updPVZ model.PVZ)
	afterUpdatePVZCounter  uint64
	beforeUpdatePVZCounter uint64
	UpdatePVZMock          mServiceMockUpdatePVZ
}

// NewServiceMock returns a mock for pvz.service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreatePVZMock = mServiceMockCreatePVZ{mock: m}
	m.CreatePVZMock.callArgs = []*ServiceMockCreatePVZParams{}

	m.DeletePVZMock = mServiceMockDeletePVZ{mock: m}
	m.DeletePVZMock.callArgs = []*ServiceMockDeletePVZParams{}

	m.GetPVZByIDMock = mServiceMockGetPVZByID{mock: m}
	m.GetPVZByIDMock.callArgs = []*ServiceMockGetPVZByIDParams{}

	m.ListPVZsMock = mServiceMockListPVZs{mock: m}
	m.ListPVZsMock.callArgs = []*ServiceMockListPVZsParams{}

	m.UpdatePVZMock = mServiceMockUpdatePVZ{mock: m}
	m.UpdatePVZMock.callArgs = []*ServiceMockUpdatePVZParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mServiceMockCreatePVZ struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockCreatePVZExpectation
	expectations       []*ServiceMockCreatePVZExpectation

	callArgs []*ServiceMockCreatePVZParams
	mutex    sync.RWMutex
}

// ServiceMockCreatePVZExpectation specifies expectation struct of the service.CreatePVZ
type ServiceMockCreatePVZExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockCreatePVZParams
	results *ServiceMockCreatePVZResults
	Counter uint64
}

// ServiceMockCreatePVZParams contains parameters of the service.CreatePVZ
type ServiceMockCreatePVZParams struct {
	ctx context.Context
	pvz model.PVZ
}

// ServiceMockCreatePVZResults contains results of the service.CreatePVZ
type ServiceMockCreatePVZResults struct {
	u1  uuid.UUID
	err error
}

// Expect sets up expected params for service.CreatePVZ
func (mmCreatePVZ *mServiceMockCreatePVZ) Expect(ctx context.Context, pvz model.PVZ) *mServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("ServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &ServiceMockCreatePVZExpectation{}
	}

	mmCreatePVZ.defaultExpectation.params = &ServiceMockCreatePVZParams{ctx, pvz}
	for _, e := range mmCreatePVZ.expectations {
		if minimock.Equal(e.params, mmCreatePVZ.defaultExpectation.params) {
			mmCreatePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreatePVZ.defaultExpectation.params)
		}
	}

	return mmCreatePVZ
}

// Inspect accepts an inspector function that has same arguments as the service.CreatePVZ
func (mmCreatePVZ *mServiceMockCreatePVZ) Inspect(f func(ctx context.Context, pvz model.PVZ)) *mServiceMockCreatePVZ {
	if mmCreatePVZ.mock.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("Inspect function is already set for ServiceMock.CreatePVZ")
	}

	mmCreatePVZ.mock.inspectFuncCreatePVZ = f

	return mmCreatePVZ
}

// Return sets up results that will be returned by service.CreatePVZ
func (mmCreatePVZ *mServiceMockCreatePVZ) Return(u1 uuid.UUID, err error) *ServiceMock {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("ServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &ServiceMockCreatePVZExpectation{mock: mmCreatePVZ.mock}
	}
	mmCreatePVZ.defaultExpectation.results = &ServiceMockCreatePVZResults{u1, err}
	return mmCreatePVZ.mock
}

// Set uses given function f to mock the service.CreatePVZ method
func (mmCreatePVZ *mServiceMockCreatePVZ) Set(f func(ctx context.Context, pvz model.PVZ) (u1 uuid.UUID, err error)) *ServiceMock {
	if mmCreatePVZ.defaultExpectation != nil {
		mmCreatePVZ.mock.t.Fatalf("Default expectation is already set for the service.CreatePVZ method")
	}

	if len(mmCreatePVZ.expectations) > 0 {
		mmCreatePVZ.mock.t.Fatalf("Some expectations are already set for the service.CreatePVZ method")
	}

	mmCreatePVZ.mock.funcCreatePVZ = f
	return mmCreatePVZ.mock
}

// When sets expectation for the service.CreatePVZ which will trigger the result defined by the following
// Then helper
func (mmCreatePVZ *mServiceMockCreatePVZ) When(ctx context.Context, pvz model.PVZ) *ServiceMockCreatePVZExpectation {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("ServiceMock.CreatePVZ mock is already set by Set")
	}

	expectation := &ServiceMockCreatePVZExpectation{
		mock:   mmCreatePVZ.mock,
		params: &ServiceMockCreatePVZParams{ctx, pvz},
	}
	mmCreatePVZ.expectations = append(mmCreatePVZ.expectations, expectation)
	return expectation
}

// Then sets up service.CreatePVZ return parameters for the expectation previously defined by the When method
func (e *ServiceMockCreatePVZExpectation) Then(u1 uuid.UUID, err error) *ServiceMock {
	e.results = &ServiceMockCreatePVZResults{u1, err}
	return e.mock
}

// CreatePVZ implements pvz.service
func (mmCreatePVZ *ServiceMock) CreatePVZ(ctx context.Context, pvz model.PVZ) (u1 uuid.UUID, err error) {
	mm_atomic.AddUint64(&mmCreatePVZ.beforeCreatePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmCreatePVZ.afterCreatePVZCounter, 1)

	if mmCreatePVZ.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.inspectFuncCreatePVZ(ctx, pvz)
	}

	mm_params := ServiceMockCreatePVZParams{ctx, pvz}

	// Record call args
	mmCreatePVZ.CreatePVZMock.mutex.Lock()
	mmCreatePVZ.CreatePVZMock.callArgs = append(mmCreatePVZ.CreatePVZMock.callArgs, &mm_params)
	mmCreatePVZ.CreatePVZMock.mutex.Unlock()

	for _, e := range mmCreatePVZ.CreatePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreatePVZ.CreatePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreatePVZ.CreatePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmCreatePVZ.CreatePVZMock.defaultExpectation.params
		mm_got := ServiceMockCreatePVZParams{ctx, pvz}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreatePVZ.t.Errorf("ServiceMock.CreatePVZ got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreatePVZ.CreatePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmCreatePVZ.t.Fatal("No results are set for the ServiceMock.CreatePVZ")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreatePVZ.funcCreatePVZ != nil {
		return mmCreatePVZ.funcCreatePVZ(ctx, pvz)
	}
	mmCreatePVZ.t.Fatalf("Unexpected call to ServiceMock.CreatePVZ. %v %v", ctx, pvz)
	return
}

// CreatePVZAfterCounter returns a count of finished ServiceMock.CreatePVZ invocations
func (mmCreatePVZ *ServiceMock) CreatePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.afterCreatePVZCounter)
}

// CreatePVZBeforeCounter returns a count of ServiceMock.CreatePVZ invocations
func (mmCreatePVZ *ServiceMock) CreatePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.beforeCreatePVZCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.CreatePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreatePVZ *mServiceMockCreatePVZ) Calls() []*ServiceMockCreatePVZParams {
	mmCreatePVZ.mutex.RLock()

	argCopy := make([]*ServiceMockCreatePVZParams, len(mmCreatePVZ.callArgs))
	copy(argCopy, mmCreatePVZ.callArgs)

	mmCreatePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockCreatePVZDone returns true if the count of the CreatePVZ invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockCreatePVZDone() bool {
	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreatePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreatePVZCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreatePVZ != nil && mm_atomic.LoadUint64(&m.afterCreatePVZCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreatePVZInspect logs each unmet expectation
func (m *ServiceMock) MinimockCreatePVZInspect() {
	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.CreatePVZ with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreatePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreatePVZCounter) < 1 {
		if m.CreatePVZMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.CreatePVZ")
		} else {
			m.t.Errorf("Expected call to ServiceMock.CreatePVZ with params: %#v", *m.CreatePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreatePVZ != nil && mm_atomic.LoadUint64(&m.afterCreatePVZCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.CreatePVZ")
	}
}

type mServiceMockDeletePVZ struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockDeletePVZExpectation
	expectations       []*ServiceMockDeletePVZExpectation

	callArgs []*ServiceMockDeletePVZParams
	mutex    sync.RWMutex
}

// ServiceMockDeletePVZExpectation specifies expectation struct of the service.DeletePVZ
type ServiceMockDeletePVZExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockDeletePVZParams
	results *ServiceMockDeletePVZResults
	Counter uint64
}

// ServiceMockDeletePVZParams contains parameters of the service.DeletePVZ
type ServiceMockDeletePVZParams struct {
	ctx context.Context
	id  uuid.UUID
}

// ServiceMockDeletePVZResults contains results of the service.DeletePVZ
type ServiceMockDeletePVZResults struct {
	err error
}

// Expect sets up expected params for service.DeletePVZ
func (mmDeletePVZ *mServiceMockDeletePVZ) Expect(ctx context.Context, id uuid.UUID) *mServiceMockDeletePVZ {
	if mmDeletePVZ.mock.funcDeletePVZ != nil {
		mmDeletePVZ.mock.t.Fatalf("ServiceMock.DeletePVZ mock is already set by Set")
	}

	if mmDeletePVZ.defaultExpectation == nil {
		mmDeletePVZ.defaultExpectation = &ServiceMockDeletePVZExpectation{}
	}

	mmDeletePVZ.defaultExpectation.params = &ServiceMockDeletePVZParams{ctx, id}
	for _, e := range mmDeletePVZ.expectations {
		if minimock.Equal(e.params, mmDeletePVZ.defaultExpectation.params) {
			mmDeletePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeletePVZ.defaultExpectation.params)
		}
	}

	return mmDeletePVZ
}

// Inspect accepts an inspector function that has same arguments as the service.DeletePVZ
func (mmDeletePVZ *mServiceMockDeletePVZ) Inspect(f func(ctx context.Context, id uuid.UUID)) *mServiceMockDeletePVZ {
	if mmDeletePVZ.mock.inspectFuncDeletePVZ != nil {
		mmDeletePVZ.mock.t.Fatalf("Inspect function is already set for ServiceMock.DeletePVZ")
	}

	mmDeletePVZ.mock.inspectFuncDeletePVZ = f

	return mmDeletePVZ
}

// Return sets up results that will be returned by service.DeletePVZ
func (mmDeletePVZ *mServiceMockDeletePVZ) Return(err error) *ServiceMock {
	if mmDeletePVZ.mock.funcDeletePVZ != nil {
		mmDeletePVZ.mock.t.Fatalf("ServiceMock.DeletePVZ mock is already set by Set")
	}

	if mmDeletePVZ.defaultExpectation == nil {
		mmDeletePVZ.defaultExpectation = &ServiceMockDeletePVZExpectation{mock: mmDeletePVZ.mock}
	}
	mmDeletePVZ.defaultExpectation.results = &ServiceMockDeletePVZResults{err}
	return mmDeletePVZ.mock
}

// Set uses given function f to mock the service.DeletePVZ method
func (mmDeletePVZ *mServiceMockDeletePVZ) Set(f func(ctx context.Context, id uuid.UUID) (err error)) *ServiceMock {
	if mmDeletePVZ.defaultExpectation != nil {
		mmDeletePVZ.mock.t.Fatalf("Default expectation is already set for the service.DeletePVZ method")
	}

	if len(mmDeletePVZ.expectations) > 0 {
		mmDeletePVZ.mock.t.Fatalf("Some expectations are already set for the service.DeletePVZ method")
	}

	mmDeletePVZ.mock.funcDeletePVZ = f
	return mmDeletePVZ.mock
}

// When sets expectation for the service.DeletePVZ which will trigger the result defined by the following
// Then helper
func (mmDeletePVZ *mServiceMockDeletePVZ) When(ctx context.Context, id uuid.UUID) *ServiceMockDeletePVZExpectation {
	if mmDeletePVZ.mock.funcDeletePVZ != nil {
		mmDeletePVZ.mock.t.Fatalf("ServiceMock.DeletePVZ mock is already set by Set")
	}

	expectation := &ServiceMockDeletePVZExpectation{
		mock:   mmDeletePVZ.mock,
		params: &ServiceMockDeletePVZParams{ctx, id},
	}
	mmDeletePVZ.expectations = append(mmDeletePVZ.expectations, expectation)
	return expectation
}

// Then sets up service.DeletePVZ return parameters for the expectation previously defined by the When method
func (e *ServiceMockDeletePVZExpectation) Then(err error) *ServiceMock {
	e.results = &ServiceMockDeletePVZResults{err}
	return e.mock
}

// DeletePVZ implements pvz.service
func (mmDeletePVZ *ServiceMock) DeletePVZ(ctx context.Context, id uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDeletePVZ.beforeDeletePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmDeletePVZ.afterDeletePVZCounter, 1)

	if mmDeletePVZ.inspectFuncDeletePVZ != nil {
		mmDeletePVZ.inspectFuncDeletePVZ(ctx, id)
	}

	mm_params := ServiceMockDeletePVZParams{ctx, id}

	// Record call args
	mmDeletePVZ.DeletePVZMock.mutex.Lock()
	mmDeletePVZ.DeletePVZMock.callArgs = append(mmDeletePVZ.DeletePVZMock.callArgs, &mm_params)
	mmDeletePVZ.DeletePVZMock.mutex.Unlock()

	for _, e := range mmDeletePVZ.DeletePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeletePVZ.DeletePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeletePVZ.DeletePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmDeletePVZ.DeletePVZMock.defaultExpectation.params
		mm_got := ServiceMockDeletePVZParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeletePVZ.t.Errorf("ServiceMock.DeletePVZ got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeletePVZ.DeletePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmDeletePVZ.t.Fatal("No results are set for the ServiceMock.DeletePVZ")
		}
		return (*mm_results).err
	}
	if mmDeletePVZ.funcDeletePVZ != nil {
		return mmDeletePVZ.funcDeletePVZ(ctx, id)
	}
	mmDeletePVZ.t.Fatalf("Unexpected call to ServiceMock.DeletePVZ. %v %v", ctx, id)
	return
}

// DeletePVZAfterCounter returns a count of finished ServiceMock.DeletePVZ invocations
func (mmDeletePVZ *ServiceMock) DeletePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeletePVZ.afterDeletePVZCounter)
}

// DeletePVZBeforeCounter returns a count of ServiceMock.DeletePVZ invocations
func (mmDeletePVZ *ServiceMock) DeletePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeletePVZ.beforeDeletePVZCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.DeletePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeletePVZ *mServiceMockDeletePVZ) Calls() []*ServiceMockDeletePVZParams {
	mmDeletePVZ.mutex.RLock()

	argCopy := make([]*ServiceMockDeletePVZParams, len(mmDeletePVZ.callArgs))
	copy(argCopy, mmDeletePVZ.callArgs)

	mmDeletePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockDeletePVZDone returns true if the count of the DeletePVZ invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockDeletePVZDone() bool {
	for _, e := range m.DeletePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeletePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeletePVZCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeletePVZ != nil && mm_atomic.LoadUint64(&m.afterDeletePVZCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeletePVZInspect logs each unmet expectation
func (m *ServiceMock) MinimockDeletePVZInspect() {
	for _, e := range m.DeletePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.DeletePVZ with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeletePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeletePVZCounter) < 1 {
		if m.DeletePVZMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.DeletePVZ")
		} else {
			m.t.Errorf("Expected call to ServiceMock.DeletePVZ with params: %#v", *m.DeletePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeletePVZ != nil && mm_atomic.LoadUint64(&m.afterDeletePVZCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.DeletePVZ")
	}
}

type mServiceMockGetPVZByID struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockGetPVZByIDExpectation
	expectations       []*ServiceMockGetPVZByIDExpectation

	callArgs []*ServiceMockGetPVZByIDParams
	mutex    sync.RWMutex
}

// ServiceMockGetPVZByIDExpectation specifies expectation struct of the service.GetPVZByID
type ServiceMockGetPVZByIDExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockGetPVZByIDParams
	results *ServiceMockGetPVZByIDResults
	Counter uint64
}

// ServiceMockGetPVZByIDParams contains parameters of the service.GetPVZByID
type ServiceMockGetPVZByIDParams struct {
	ctx context.Context
	id  uuid.UUID
}

// ServiceMockGetPVZByIDResults contains results of the service.GetPVZByID
type ServiceMockGetPVZByIDResults struct {
	p1  model.PVZ
	err error
}

// Expect sets up expected params for service.GetPVZByID
func (mmGetPVZByID *mServiceMockGetPVZByID) Expect(ctx context.Context, id uuid.UUID) *mServiceMockGetPVZByID {
	if mmGetPVZByID.mock.funcGetPVZByID != nil {
		mmGetPVZByID.mock.t.Fatalf("ServiceMock.GetPVZByID mock is already set by Set")
	}

	if mmGetPVZByID.defaultExpectation == nil {
		mmGetPVZByID.defaultExpectation = &ServiceMockGetPVZByIDExpectation{}
	}

	mmGetPVZByID.defaultExpectation.params = &ServiceMockGetPVZByIDParams{ctx, id}
	for _, e := range mmGetPVZByID.expectations {
		if minimock.Equal(e.params, mmGetPVZByID.defaultExpectation.params) {
			mmGetPVZByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPVZByID.defaultExpectation.params)
		}
	}

	return mmGetPVZByID
}

// Inspect accepts an inspector function that has same arguments as the service.GetPVZByID
func (mmGetPVZByID *mServiceMockGetPVZByID) Inspect(f func(ctx context.Context, id uuid.UUID)) *mServiceMockGetPVZByID {
	if mmGetPVZByID.mock.inspectFuncGetPVZByID != nil {
		mmGetPVZByID.mock.t.Fatalf("Inspect function is already set for ServiceMock.GetPVZByID")
	}

	mmGetPVZByID.mock.inspectFuncGetPVZByID = f

	return mmGetPVZByID
}

// Return sets up results that will be returned by service.GetPVZByID
func (mmGetPVZByID *mServiceMockGetPVZByID) Return(p1 model.PVZ, err error) *ServiceMock {
	if mmGetPVZByID.mock.funcGetPVZByID != nil {
		mmGetPVZByID.mock.t.Fatalf("ServiceMock.GetPVZByID mock is already set by Set")
	}

	if mmGetPVZByID.defaultExpectation == nil {
		mmGetPVZByID.defaultExpectation = &ServiceMockGetPVZByIDExpectation{mock: mmGetPVZByID.mock}
	}
	mmGetPVZByID.defaultExpectation.results = &ServiceMockGetPVZByIDResults{p1, err}
	return mmGetPVZByID.mock
}

// Set uses given function f to mock the service.GetPVZByID method
func (mmGetPVZByID *mServiceMockGetPVZByID) Set(f func(ctx context.Context, id uuid.UUID) (p1 model.PVZ, err error)) *ServiceMock {
	if mmGetPVZByID.defaultExpectation != nil {
		mmGetPVZByID.mock.t.Fatalf("Default expectation is already set for the service.GetPVZByID method")
	}

	if len(mmGetPVZByID.expectations) > 0 {
		mmGetPVZByID.mock.t.Fatalf("Some expectations are already set for the service.GetPVZByID method")
	}

	mmGetPVZByID.mock.funcGetPVZByID = f
	return mmGetPVZByID.mock
}

// When sets expectation for the service.GetPVZByID which will trigger the result defined by the following
// Then helper
func (mmGetPVZByID *mServiceMockGetPVZByID) When(ctx context.Context, id uuid.UUID) *ServiceMockGetPVZByIDExpectation {
	if mmGetPVZByID.mock.funcGetPVZByID != nil {
		mmGetPVZByID.mock.t.Fatalf("ServiceMock.GetPVZByID mock is already set by Set")
	}

	expectation := &ServiceMockGetPVZByIDExpectation{
		mock:   mmGetPVZByID.mock,
		params: &ServiceMockGetPVZByIDParams{ctx, id},
	}
	mmGetPVZByID.expectations = append(mmGetPVZByID.expectations, expectation)
	return expectation
}

// Then sets up service.GetPVZByID return parameters for the expectation previously defined by the When method
func (e *ServiceMockGetPVZByIDExpectation) Then(p1 model.PVZ, err error) *ServiceMock {
	e.results = &ServiceMockGetPVZByIDResults{p1, err}
	return e.mock
}

// GetPVZByID implements pvz.service
func (mmGetPVZByID *ServiceMock) GetPVZByID(ctx context.Context, id uuid.UUID) (p1 model.PVZ, err error) {
	mm_atomic.AddUint64(&mmGetPVZByID.beforeGetPVZByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPVZByID.afterGetPVZByIDCounter, 1)

	if mmGetPVZByID.inspectFuncGetPVZByID != nil {
		mmGetPVZByID.inspectFuncGetPVZByID(ctx, id)
	}

	mm_params := ServiceMockGetPVZByIDParams{ctx, id}

	// Record call args
	mmGetPVZByID.GetPVZByIDMock.mutex.Lock()
	mmGetPVZByID.GetPVZByIDMock.callArgs = append(mmGetPVZByID.GetPVZByIDMock.callArgs, &mm_params)
	mmGetPVZByID.GetPVZByIDMock.mutex.Unlock()

	for _, e := range mmGetPVZByID.GetPVZByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGetPVZByID.GetPVZByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPVZByID.GetPVZByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPVZByID.GetPVZByIDMock.defaultExpectation.params
		mm_got := ServiceMockGetPVZByIDParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPVZByID.t.Errorf("ServiceMock.GetPVZByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPVZByID.GetPVZByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPVZByID.t.Fatal("No results are set for the ServiceMock.GetPVZByID")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGetPVZByID.funcGetPVZByID != nil {
		return mmGetPVZByID.funcGetPVZByID(ctx, id)
	}
	mmGetPVZByID.t.Fatalf("Unexpected call to ServiceMock.GetPVZByID. %v %v", ctx, id)
	return
}

// GetPVZByIDAfterCounter returns a count of finished ServiceMock.GetPVZByID invocations
func (mmGetPVZByID *ServiceMock) GetPVZByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZByID.afterGetPVZByIDCounter)
}

// GetPVZByIDBeforeCounter returns a count of ServiceMock.GetPVZByID invocations
func (mmGetPVZByID *ServiceMock) GetPVZByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZByID.beforeGetPVZByIDCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.GetPVZByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPVZByID *mServiceMockGetPVZByID) Calls() []*ServiceMockGetPVZByIDParams {
	mmGetPVZByID.mutex.RLock()

	argCopy := make([]*ServiceMockGetPVZByIDParams, len(mmGetPVZByID.callArgs))
	copy(argCopy, mmGetPVZByID.callArgs)

	mmGetPVZByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetPVZByIDDone returns true if the count of the GetPVZByID invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockGetPVZByIDDone() bool {
	for _, e := range m.GetPVZByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPVZByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPVZByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPVZByID != nil && mm_atomic.LoadUint64(&m.afterGetPVZByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPVZByIDInspect logs each unmet expectation
func (m *ServiceMock) MinimockGetPVZByIDInspect() {
	for _, e := range m.GetPVZByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.GetPVZByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPVZByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPVZByIDCounter) < 1 {
		if m.GetPVZByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.GetPVZByID")
		} else {
			m.t.Errorf("Expected call to ServiceMock.GetPVZByID with params: %#v", *m.GetPVZByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPVZByID != nil && mm_atomic.LoadUint64(&m.afterGetPVZByIDCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.GetPVZByID")
	}
}

type mServiceMockListPVZs struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockListPVZsExpectation
	expectations       []*ServiceMockListPVZsExpectation

	callArgs []*ServiceMockListPVZsParams
	mutex    sync.RWMutex
}

// ServiceMockListPVZsExpectation specifies expectation struct of the service.ListPVZs
type ServiceMockListPVZsExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockListPVZsParams
	results *ServiceMockListPVZsResults
	Counter uint64
}

// ServiceMockListPVZsParams contains parameters of the service.ListPVZs
type ServiceMockListPVZsParams struct {
	ctx context.Context
}

// ServiceMockListPVZsResults contains results of the service.ListPVZs
type ServiceMockListPVZsResults struct {
	pa1 []model.PVZ
	err error
}

// Expect sets up expected params for service.ListPVZs
func (mmListPVZs *mServiceMockListPVZs) Expect(ctx context.Context) *mServiceMockListPVZs {
	if mmListPVZs.mock.funcListPVZs != nil {
		mmListPVZs.mock.t.Fatalf("ServiceMock.ListPVZs mock is already set by Set")
	}

	if mmListPVZs.defaultExpectation == nil {
		mmListPVZs.defaultExpectation = &ServiceMockListPVZsExpectation{}
	}

	mmListPVZs.defaultExpectation.params = &ServiceMockListPVZsParams{ctx}
	for _, e := range mmListPVZs.expectations {
		if minimock.Equal(e.params, mmListPVZs.defaultExpectation.params) {
			mmListPVZs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListPVZs.defaultExpectation.params)
		}
	}

	return mmListPVZs
}

// Inspect accepts an inspector function that has same arguments as the service.ListPVZs
func (mmListPVZs *mServiceMockListPVZs) Inspect(f func(ctx context.Context)) *mServiceMockListPVZs {
	if mmListPVZs.mock.inspectFuncListPVZs != nil {
		mmListPVZs.mock.t.Fatalf("Inspect function is already set for ServiceMock.ListPVZs")
	}

	mmListPVZs.mock.inspectFuncListPVZs = f

	return mmListPVZs
}

// Return sets up results that will be returned by service.ListPVZs
func (mmListPVZs *mServiceMockListPVZs) Return(pa1 []model.PVZ, err error) *ServiceMock {
	if mmListPVZs.mock.funcListPVZs != nil {
		mmListPVZs.mock.t.Fatalf("ServiceMock.ListPVZs mock is already set by Set")
	}

	if mmListPVZs.defaultExpectation == nil {
		mmListPVZs.defaultExpectation = &ServiceMockListPVZsExpectation{mock: mmListPVZs.mock}
	}
	mmListPVZs.defaultExpectation.results = &ServiceMockListPVZsResults{pa1, err}
	return mmListPVZs.mock
}

// Set uses given function f to mock the service.ListPVZs method
func (mmListPVZs *mServiceMockListPVZs) Set(f func(ctx context.Context) (pa1 []model.PVZ, err error)) *ServiceMock {
	if mmListPVZs.defaultExpectation != nil {
		mmListPVZs.mock.t.Fatalf("Default expectation is already set for the service.ListPVZs method")
	}

	if len(mmListPVZs.expectations) > 0 {
		mmListPVZs.mock.t.Fatalf("Some expectations are already set for the service.ListPVZs method")
	}

	mmListPVZs.mock.funcListPVZs = f
	return mmListPVZs.mock
}

// When sets expectation for the service.ListPVZs which will trigger the result defined by the following
// Then helper
func (mmListPVZs *mServiceMockListPVZs) When(ctx context.Context) *ServiceMockListPVZsExpectation {
	if mmListPVZs.mock.funcListPVZs != nil {
		mmListPVZs.mock.t.Fatalf("ServiceMock.ListPVZs mock is already set by Set")
	}

	expectation := &ServiceMockListPVZsExpectation{
		mock:   mmListPVZs.mock,
		params: &ServiceMockListPVZsParams{ctx},
	}
	mmListPVZs.expectations = append(mmListPVZs.expectations, expectation)
	return expectation
}

// Then sets up service.ListPVZs return parameters for the expectation previously defined by the When method
func (e *ServiceMockListPVZsExpectation) Then(pa1 []model.PVZ, err error) *ServiceMock {
	e.results = &ServiceMockListPVZsResults{pa1, err}
	return e.mock
}

// ListPVZs implements pvz.service
func (mmListPVZs *ServiceMock) ListPVZs(ctx context.Context) (pa1 []model.PVZ, err error) {
	mm_atomic.AddUint64(&mmListPVZs.beforeListPVZsCounter, 1)
	defer mm_atomic.AddUint64(&mmListPVZs.afterListPVZsCounter, 1)

	if mmListPVZs.inspectFuncListPVZs != nil {
		mmListPVZs.inspectFuncListPVZs(ctx)
	}

	mm_params := ServiceMockListPVZsParams{ctx}

	// Record call args
	mmListPVZs.ListPVZsMock.mutex.Lock()
	mmListPVZs.ListPVZsMock.callArgs = append(mmListPVZs.ListPVZsMock.callArgs, &mm_params)
	mmListPVZs.ListPVZsMock.mutex.Unlock()

	for _, e := range mmListPVZs.ListPVZsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmListPVZs.ListPVZsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListPVZs.ListPVZsMock.defaultExpectation.Counter, 1)
		mm_want := mmListPVZs.ListPVZsMock.defaultExpectation.params
		mm_got := ServiceMockListPVZsParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListPVZs.t.Errorf("ServiceMock.ListPVZs got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListPVZs.ListPVZsMock.defaultExpectation.results
		if mm_results == nil {
			mmListPVZs.t.Fatal("No results are set for the ServiceMock.ListPVZs")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmListPVZs.funcListPVZs != nil {
		return mmListPVZs.funcListPVZs(ctx)
	}
	mmListPVZs.t.Fatalf("Unexpected call to ServiceMock.ListPVZs. %v", ctx)
	return
}

// ListPVZsAfterCounter returns a count of finished ServiceMock.ListPVZs invocations
func (mmListPVZs *ServiceMock) ListPVZsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListPVZs.afterListPVZsCounter)
}

// ListPVZsBeforeCounter returns a count of ServiceMock.ListPVZs invocations
func (mmListPVZs *ServiceMock) ListPVZsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListPVZs.beforeListPVZsCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.ListPVZs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListPVZs *mServiceMockListPVZs) Calls() []*ServiceMockListPVZsParams {
	mmListPVZs.mutex.RLock()

	argCopy := make([]*ServiceMockListPVZsParams, len(mmListPVZs.callArgs))
	copy(argCopy, mmListPVZs.callArgs)

	mmListPVZs.mutex.RUnlock()

	return argCopy
}

// MinimockListPVZsDone returns true if the count of the ListPVZs invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockListPVZsDone() bool {
	for _, e := range m.ListPVZsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListPVZsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListPVZsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListPVZs != nil && mm_atomic.LoadUint64(&m.afterListPVZsCounter) < 1 {
		return false
	}
	return true
}

// MinimockListPVZsInspect logs each unmet expectation
func (m *ServiceMock) MinimockListPVZsInspect() {
	for _, e := range m.ListPVZsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.ListPVZs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListPVZsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListPVZsCounter) < 1 {
		if m.ListPVZsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.ListPVZs")
		} else {
			m.t.Errorf("Expected call to ServiceMock.ListPVZs with params: %#v", *m.ListPVZsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListPVZs != nil && mm_atomic.LoadUint64(&m.afterListPVZsCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.ListPVZs")
	}
}

type mServiceMockUpdatePVZ struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockUpdatePVZExpectation
	expectations       []*ServiceMockUpdatePVZExpectation

	callArgs []*ServiceMockUpdatePVZParams
	mutex    sync.RWMutex
}

// ServiceMockUpdatePVZExpectation specifies expectation struct of the service.UpdatePVZ
type ServiceMockUpdatePVZExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockUpdatePVZParams
	results *ServiceMockUpdatePVZResults
	Counter uint64
}

// ServiceMockUpdatePVZParams contains parameters of the service.UpdatePVZ
type ServiceMockUpdatePVZParams struct {
	ctx    context.Context
	updPVZ model.PVZ
}

// ServiceMockUpdatePVZResults contains results of the service.UpdatePVZ
type ServiceMockUpdatePVZResults struct {
	err error
}

// Expect sets up expected params for service.UpdatePVZ
func (mmUpdatePVZ *mServiceMockUpdatePVZ) Expect(ctx context.Context, updPVZ model.PVZ) *mServiceMockUpdatePVZ {
	if mmUpdatePVZ.mock.funcUpdatePVZ != nil {
		mmUpdatePVZ.mock.t.Fatalf("ServiceMock.UpdatePVZ mock is already set by Set")
	}

	if mmUpdatePVZ.defaultExpectation == nil {
		mmUpdatePVZ.defaultExpectation = &ServiceMockUpdatePVZExpectation{}
	}

	mmUpdatePVZ.defaultExpectation.params = &ServiceMockUpdatePVZParams{ctx, updPVZ}
	for _, e := range mmUpdatePVZ.expectations {
		if minimock.Equal(e.params, mmUpdatePVZ.defaultExpectation.params) {
			mmUpdatePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdatePVZ.defaultExpectation.params)
		}
	}

	return mmUpdatePVZ
}

// Inspect accepts an inspector function that has same arguments as the service.UpdatePVZ
func (mmUpdatePVZ *mServiceMockUpdatePVZ) Inspect(f func(ctx context.Context, updPVZ model.PVZ)) *mServiceMockUpdatePVZ {
	if mmUpdatePVZ.mock.inspectFuncUpdatePVZ != nil {
		mmUpdatePVZ.mock.t.Fatalf("Inspect function is already set for ServiceMock.UpdatePVZ")
	}

	mmUpdatePVZ.mock.inspectFuncUpdatePVZ = f

	return mmUpdatePVZ
}

// Return sets up results that will be returned by service.UpdatePVZ
func (mmUpdatePVZ *mServiceMockUpdatePVZ) Return(err error) *ServiceMock {
	if mmUpdatePVZ.mock.funcUpdatePVZ != nil {
		mmUpdatePVZ.mock.t.Fatalf("ServiceMock.UpdatePVZ mock is already set by Set")
	}

	if mmUpdatePVZ.defaultExpectation == nil {
		mmUpdatePVZ.defaultExpectation = &ServiceMockUpdatePVZExpectation{mock: mmUpdatePVZ.mock}
	}
	mmUpdatePVZ.defaultExpectation.results = &ServiceMockUpdatePVZResults{err}
	return mmUpdatePVZ.mock
}

// Set uses given function f to mock the service.UpdatePVZ method
func (mmUpdatePVZ *mServiceMockUpdatePVZ) Set(f func(ctx context.Context, updPVZ model.PVZ) (err error)) *ServiceMock {
	if mmUpdatePVZ.defaultExpectation != nil {
		mmUpdatePVZ.mock.t.Fatalf("Default expectation is already set for the service.UpdatePVZ method")
	}

	if len(mmUpdatePVZ.expectations) > 0 {
		mmUpdatePVZ.mock.t.Fatalf("Some expectations are already set for the service.UpdatePVZ method")
	}

	mmUpdatePVZ.mock.funcUpdatePVZ = f
	return mmUpdatePVZ.mock
}

// When sets expectation for the service.UpdatePVZ which will trigger the result defined by the following
// Then helper
func (mmUpdatePVZ *mServiceMockUpdatePVZ) When(ctx context.Context, updPVZ model.PVZ) *ServiceMockUpdatePVZExpectation {
	if mmUpdatePVZ.mock.funcUpdatePVZ != nil {
		mmUpdatePVZ.mock.t.Fatalf("ServiceMock.UpdatePVZ mock is already set by Set")
	}

	expectation := &ServiceMockUpdatePVZExpectation{
		mock:   mmUpdatePVZ.mock,
		params: &ServiceMockUpdatePVZParams{ctx, updPVZ},
	}
	mmUpdatePVZ.expectations = append(mmUpdatePVZ.expectations, expectation)
	return expectation
}

// Then sets up service.UpdatePVZ return parameters for the expectation previously defined by the When method
func (e *ServiceMockUpdatePVZExpectation) Then(err error) *ServiceMock {
	e.results = &ServiceMockUpdatePVZResults{err}
	return e.mock
}

// UpdatePVZ implements pvz.service
func (mmUpdatePVZ *ServiceMock) UpdatePVZ(ctx context.Context, updPVZ model.PVZ) (err error) {
	mm_atomic.AddUint64(&mmUpdatePVZ.beforeUpdatePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdatePVZ.afterUpdatePVZCounter, 1)

	if mmUpdatePVZ.inspectFuncUpdatePVZ != nil {
		mmUpdatePVZ.inspectFuncUpdatePVZ(ctx, updPVZ)
	}

	mm_params := ServiceMockUpdatePVZParams{ctx, updPVZ}

	// Record call args
	mmUpdatePVZ.UpdatePVZMock.mutex.Lock()
	mmUpdatePVZ.UpdatePVZMock.callArgs = append(mmUpdatePVZ.UpdatePVZMock.callArgs, &mm_params)
	mmUpdatePVZ.UpdatePVZMock.mutex.Unlock()

	for _, e := range mmUpdatePVZ.UpdatePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdatePVZ.UpdatePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdatePVZ.UpdatePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdatePVZ.UpdatePVZMock.defaultExpectation.params
		mm_got := ServiceMockUpdatePVZParams{ctx, updPVZ}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdatePVZ.t.Errorf("ServiceMock.UpdatePVZ got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdatePVZ.UpdatePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdatePVZ.t.Fatal("No results are set for the ServiceMock.UpdatePVZ")
		}
		return (*mm_results).err
	}
	if mmUpdatePVZ.funcUpdatePVZ != nil {
		return mmUpdatePVZ.funcUpdatePVZ(ctx, updPVZ)
	}
	mmUpdatePVZ.t.Fatalf("Unexpected call to ServiceMock.UpdatePVZ. %v %v", ctx, updPVZ)
	return
}

// UpdatePVZAfterCounter returns a count of finished ServiceMock.UpdatePVZ invocations
func (mmUpdatePVZ *ServiceMock) UpdatePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePVZ.afterUpdatePVZCounter)
}

// UpdatePVZBeforeCounter returns a count of ServiceMock.UpdatePVZ invocations
func (mmUpdatePVZ *ServiceMock) UpdatePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdatePVZ.beforeUpdatePVZCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.UpdatePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdatePVZ *mServiceMockUpdatePVZ) Calls() []*ServiceMockUpdatePVZParams {
	mmUpdatePVZ.mutex.RLock()

	argCopy := make([]*ServiceMockUpdatePVZParams, len(mmUpdatePVZ.callArgs))
	copy(argCopy, mmUpdatePVZ.callArgs)

	mmUpdatePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockUpdatePVZDone returns true if the count of the UpdatePVZ invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockUpdatePVZDone() bool {
	for _, e := range m.UpdatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdatePVZCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePVZ != nil && mm_atomic.LoadUint64(&m.afterUpdatePVZCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdatePVZInspect logs each unmet expectation
func (m *ServiceMock) MinimockUpdatePVZInspect() {
	for _, e := range m.UpdatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.UpdatePVZ with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdatePVZMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdatePVZCounter) < 1 {
		if m.UpdatePVZMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.UpdatePVZ")
		} else {
			m.t.Errorf("Expected call to ServiceMock.UpdatePVZ with params: %#v", *m.UpdatePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdatePVZ != nil && mm_atomic.LoadUint64(&m.afterUpdatePVZCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.UpdatePVZ")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreatePVZInspect()

			m.MinimockDeletePVZInspect()

			m.MinimockGetPVZByIDInspect()

			m.MinimockListPVZsInspect()

			m.MinimockUpdatePVZInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreatePVZDone() &&
		m.MinimockDeletePVZDone() &&
		m.MinimockGetPVZByIDDone() &&
		m.MinimockListPVZsDone() &&
		m.MinimockUpdatePVZDone()
}

services:
  app:
    build: .
    restart: unless-stopped
    environment:
      - CONFIG_PATH
    depends_on:
      pg_db:
        condition: service_healthy
      pg_db_test:
        condition: service_healthy
      kafka2:
        condition: service_healthy
    ports:
      - '9000:9000'
      - '9001:9001'
    hostname:
      localhost

  pg_db:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5433:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
       - pg-data:/var/lib/postgresql/data

  pg_db_test:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5431:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d test" ]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '2181:2181'
      - '2888:2888'
      - '3888:3888'

  kafka2:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    healthcheck:
      test: ps aux | grep -q [k]afka
#      test: ps augwwx | egrep [S]upportedKafka
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INT://kafka2:29092,LISTENER_EXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER: zookeeper:2181

  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - '6379:6379'

  prometheus:
    image: prom/prometheus:v2.28.0
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    depends_on:
      - node-exporter

  node-exporter:
    image: prom/node-exporter:v1.1.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - '9100:9100'

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '6831:6831/udp'
      - '16686:16686'

volumes:
  pg-data: